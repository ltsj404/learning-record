package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/cilidm/toolbox/file"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"
)

//const PATH = "D:/Video/bilibili/16628604"
const PATH = "D:/Video/bilibili/290721726"

var (
	audio = "audio.m4s"
	video = "video.m4s"
	entry = "entry.json"
)

func main() {
	err := file.IsNotExistMkDir("./video")
	if err != nil {
		os.Mkdir("./video", os.ModePerm)
	}
	FileDirectoryAll(PATH, 0)

	if err := http.ListenAndServe(":9090", nil); err != nil {
		fmt.Println(err)
	}
}

// 遍历文件目录及子目录文件
func FileDirectoryAll(path string, curHier int) {
	readerInfos, err := ioutil.ReadDir(path)
	if err != nil {
		fmt.Println(err)
		return
	}
	for _, info := range readerInfos {
		if info.IsDir() {
			for tmpheir := curHier; tmpheir > 0; tmpheir-- {
				fmt.Printf("|\t")
			}
			fmt.Println(info.Name(), "/")
			FileDirectoryAll(path+"/"+info.Name(), curHier+1)
		} else {
			for tmpheir := curHier; tmpheir > 0; tmpheir-- {
				fmt.Printf("|\t")
			}
			fmt.Println(info.Name())
		}
		if info.Name() == video {
			fileName := GetFileName(filepath.Dir(path) + "/" + entry)
			fileName = StringFiltering(fileName)
			MergeVideo(path+"/"+video, path+"/"+audio, "./video/"+fileName+".mp4")
		}
	}
}

// 特殊字符串过滤
func StringFiltering(str string) string {
	StringArray := []string{"/", "\\", "&", "^", " ", ":", "*", "|", "<", ">", "?", "（", "）", "："}
	for _, s := range StringArray {
		str = strings.Replace(str, s, "", -1)
	}
	return str
}

// 获取文件名称
func GetFileName(entry string) string {
	readFile, err := ioutil.ReadFile(entry)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	var p AutoGenerated
	err = json.Unmarshal(readFile, &p)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	fileName := strings.Trim(p.PageData.Part, ":")
	return strconv.Itoa(p.PageData.Cid) + "-" + fileName
}

// 合并音视频
func MergeVideo(video, audio, fileName string) {
	in := bytes.Buffer{}
	outInfo := bytes.Buffer{}
	//命令写入cmd.Stdin
	FileName := fmt.Sprintf("ffmpeg -i %s -i %s -codec copy %s", video, audio, fileName)
	cmd := exec.Command("cmd", "/C", FileName)
	fmt.Println(FileName)
	cmd.Stdout = &outInfo
	cmd.Stdin = &in
	err := cmd.Start()
	if err != nil {
		fmt.Println(err.Error())
	}
	if err = cmd.Wait(); err != nil {
		fmt.Println(err.Error())
	} else {
		cmd.ProcessState.Pid()
		//程序退出code
		_ = cmd.ProcessState.Sys().(syscall.WaitStatus).ExitCode
		//输出结果
		outInfo.String()
	}
}

type AutoGenerated struct {
	MediaType                  int      `json:"media_type"`
	HasDashAudio               bool     `json:"has_dash_audio"`
	IsCompleted                bool     `json:"is_completed"`
	TotalBytes                 int      `json:"total_bytes"`
	DownloadedBytes            int      `json:"downloaded_bytes"`
	Title                      string   `json:"title"`
	TypeTag                    string   `json:"type_tag"`
	Cover                      string   `json:"cover"`
	VideoQuality               int      `json:"video_quality"`
	PreferedVideoQuality       int      `json:"prefered_video_quality"`
	GuessedTotalBytes          int      `json:"guessed_total_bytes"`
	TotalTimeMilli             int      `json:"total_time_milli"`
	DanmakuCount               int      `json:"danmaku_count"`
	TimeUpdateStamp            int64    `json:"time_update_stamp"`
	TimeCreateStamp            int64    `json:"time_create_stamp"`
	CanPlayInAdvance           bool     `json:"can_play_in_advance"`
	InterruptTransformTempFile bool     `json:"interrupt_transform_temp_file"`
	CacheVersionCode           int      `json:"cache_version_code"`
	Avid                       int      `json:"avid"`
	Spid                       int      `json:"spid"`
	SeasionID                  int      `json:"seasion_id"`
	Bvid                       string   `json:"bvid"`
	OwnerID                    int      `json:"owner_id"`
	PageData                   PageData `json:"page_data"`
}
type PageData struct {
	Cid              int    `json:"cid"`
	Page             int    `json:"page"`
	From             string `json:"from"`
	Part             string `json:"part"`
	Link             string `json:"link"`
	Vid              string `json:"vid"`
	HasAlias         bool   `json:"has_alias"`
	Tid              int    `json:"tid"`
	Width            int    `json:"width"`
	Height           int    `json:"height"`
	Rotate           int    `json:"rotate"`
	DownloadTitle    string `json:"download_title"`
	DownloadSubtitle string `json:"download_subtitle"`
}
